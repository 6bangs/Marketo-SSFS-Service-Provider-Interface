openapi: 3.0.1
info:
  title: SSFA
  description: This is a sample SSFA server swagger doc for providers to build their
    own services to be used with Marketo SSFA.
  termsOfService: https://documents.marketo.com/legal/eusa/us/2012-08-28/
  license:
    name: Marketo API License
    url: https://developers.marketo.com/api-license/
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  description: Servers where your API is deployed.  If populated, marketo will use the first server provided, if not, the hostname will be inferred from the openAPI spec location
tags:
- name: flow action
  description: your service action
  externalDocs:
    description: Find out more
    url: todo://marketo.docs/link
paths:
  /submitAsyncAction:
    post:
      tags:
      - flow action
      operationId: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/async'
      callbacks: # Callback definition
        selfServiceFlowComplete: 
          '{$request.body#/flowComplete}':
             post:
              requestBody:
                description: Flow Action return data for post processing
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/flowCallBack'
              responses:
                405:
                  description: Invalid input
                  content: {}
                404:
                  description: Not Found
                  content: {}
      responses:
        201:
          description: |- 
            Accepted:
            - Webhook created
        400:
          description: |-
            Bad Request:
            - Expected parameters were missing from the request or were invalid or Invalid document structure
        401:
          description: |-
            Unauthorized:
            - The API credentials which Marketo has are not authorized to undertake the action
        403:
          description: |-
            Forbidden:
            - Authentication Failed
        429:
          description: |-
            Too Many Requests:
            - The service has received too many requests and should retry w/ an appropriate strategy
        500:
          description: |-
            Internal Server Error:
            - Invoking the service failed for an unknown reason
  /getServiceDefinition:
    get: #update to get
      summary: Returns a service definition for user install
      responses:
        200:
          description: Service Install Metadata
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/serviceDefinition'
components:
  schemas:
    async:
      required:
      - id
      - batchid
      - campaignId
      - type
      - callbackUrl
      type: object
      properties:
        id: 
          type: string
          format: uuid
        batchid:
          type: string
          format: uuid
        campaignId:
          type: integer
          format: int32
        callbackUrl:   # Callback URL
          type: string
          format: uri
          example: https://adobe.com/send/callback/here
        type:
          type: string
          example: 'customFlow'
        context: 
          $ref: '#/components/schemas/context'
        objectData:
          type: array
          items:
            $ref: '#/components/schemas/objectData'
    context:
      type: object
      required:
      - subscription
      properties:
        subscription: 
          $ref: '#/components/schemas/subscription'
        admin: 
          $ref: '#/components/schemas/admin'
        campaign: 
          $ref: '#/components/schemas/campaign'
        program: 
          $ref: '#/components/schemas/program'
    subscription: # subscription identifiers
      type: object
      required:
      - munchkinId
      properties:
        munchkinId:
          type: string
          example: '337-INS-529'
        prefix:
          type: string
          example: 'customerPrefix'
    admin: # admin configuration of service
      type: object
    campaign: # campaign identifiers / runtime information
      type: object
    program: # program identifiers / runtime information
      type: object
    flowStepContext: #context for a leads flow step choices
      type: object
      additionalProperties: true
    programMemberContext: #context for a leads flow step choices
      type: object
      properties:
        status:
          type: string
          example: 'Registered'
        id:
          type: number
          example: 100000
        membershipDate:
          type: string
          format: date-time
        reachedSuccess:
          type: boolean
        reachedSuccessDate:
          type: string
          format: date-time
        pmcf:
          type: object
          additionalProperties: true
    triggeringContext: #context for a leads flow step choices
      type: object
      properties:
        name:
          type: string
          description: Name of the primary asset which triggered the invoking campaign
          example: "Lead-gen Form"
        triggerName:
          type: string
          description: Type of event which triggered the invoking campaign
          example: "Filled Out Form"
    objectData:
      required:
      - objectType
      - objectData
      - leadContext
      type: object
      properties:
        objectType: 
          type: string
          example: lead
        leadContext:
          $ref: '#/components/schemas/leadData'
        flowStepContext:
          $ref: '#/components/schemas/flowStepContext'
        programMemberContext:
          $ref: '#/components/schemas/programMemberContext'
        triggeringContext:
          $ref: '#/components/schemas/triggeringContext'
    callbackData:
      type: object
      required:
      - leadData
      properties:
        activityData:
          type: object
          additionalProperties: true
        leadData:
          $ref: '#/components/schemas/leadData'
    leadData:
      type: object
      required:
      - id
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: true
    flowCallBack:
      required:
      - munchkinId
      - token
      - time
      type: object
      properties:
        munchkinId:
          type: string
          example: '123-ABD-456'
        token:
          type: string
          example: '3912aec7-6d5c-4348-8b32-08966ac0dbc7'
        time:
          type: string
          format: date-time
        defaultValues:
          description: If a value for a given record is not set in the objectData array, then it will default to the value set here if there is one
          type: object
          properties:
            leadDefaults:
              type: object
              additionalProperties: true
            activityDefaults:
              type: object
              additionalProperties: true
        objectData:
          type: array
          items:
            $ref: '#/components/schemas/callbackData'
    serviceDefinition:
      type: object
      required: [apiName, provider, i18n, invocationEndpoint, statusEndpoint, authSetting, primaryAttribute, invocationPayloadDef, callbackPayloadDef]
      properties:
        apiName:
          type: string
          example: 'lookupTable'
        provider:
          type: string
          example: 'Adobe Marketo Engage'
        i18n:
          type: object
          properties:
            en_US: 
              $ref: '#/components/schemas/serviceI18nObject'
        invocationEndpoint:
          type: string
          format: uri
          example: https://serviceprovider.com/send/action/here 
        statusEndpoint:
          type: string
          format: uri
          example: https://serviceprovider.com/get/status
        authSetting:
          $ref: '#/components/schemas/authSettingObject'
        caBundle:
          type: string
          format: uri
          example: https://serviceprovider.com/get/caBundle
        serviceIcon:
          type: string
          format: uri
          example: https://serviceprovider.com/get/service.ico
        brandIcon:
          type: string
          format: uri
          example: https://serviceprovider.com/get/brand.ico
        providerInstruction:
          type: string
          format: uri
          example: https://serviceprovider.com/get/provider_instruction.html
        primaryAttribute:
          type: string
          description: API name of the attribute that describes the primary asset, should match one from or callback attribute list
        invocationPayloadDef:
          $ref: '#/components/schemas/invocationPayloadDefObject'
        callbackPayloadDef:
          $ref: '#/components/schemas/callbackPayloadDefObject'
    serviceI18nObject:
      type: object
      properties:
        name:
          type: string
          example: 'Lookup Table'
        filterName:
          type: string
          example: 'Lookup Table was Used'
        triggerName:
          type: string
          example: 'Use Lookup Table'
        description:
          type: string
          example: 'Use a lookup table to get a value'
    authSettingObject:
      oneOf:
        - $ref: '#/components/schemas/basicAuthObject'
        - $ref: '#/components/schemas/apikeyAuthObject'
        - $ref: '#/components/schemas/oauth2AuthObject'
      discriminator:
        propertyName: authType
        mapping:
          basic: '#/components/schemas/basicAuthObject'
          apiKey: '#/components/schemas/apikeyAuthObject'
          oauth2: '#/components/schemas/oauth2AuthObject'
    basicAuthObject:
      type: object
      required: [authType]
      description: See RFC 7617
      properties:
        authType:
          type: string
          enum: ['basic']
        realmRequired:
          type: boolean
    apikeyAuthObject:
      type: object
      required: [authType]
      properties:
        authType:
          type: string
          enum: ['apiKey']
        headerName:
          type: string
          example: 'x-API-Key'
    oauth2AuthObject:
      type: object
      required: [authType]
      description: See RFC 6749
      properties:
        authType:
          type: string
          enum: ['oauth2']
        grantType:
          type: string
          enum: ['client_credentials']
        grantTypeName:
          type: string
          description: grant_type by default
        clientIdName:
          type: string
          description: client_id by default. Applicable if grantType is 'client_credentials'
        clientSecretName:
          type: string
          description: client_secret by default. Applicable if grantType is 'client_credentials'
        refreshTokenEnabled:
          type: boolean
        tokenEndpoint:
          type: string
          format: uri
          description: Applicable if refreshTokenEnabled is true
    invocationPayloadDefObject:
      type: object
      properties:
        globalAttributes:
          type: array
          items:
            $ref: '#/components/schemas/invocationAttributeObject'
        flowAttributes:
          type: array
          items:
            $ref: '#/components/schemas/invocationAttributeObject'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/serviceFieldMapping'
        userDrivenMapping:
          type: boolean
        programContext: 
          type: boolean
          description: true if Service Provider needs to access program context
        campaignContext: 
          type: boolean
          description: true if Service Provider needs to access campaign context
        triggerContext: 
          type: boolean
          description: true if Service Provider needs to access trigger context
        programMemberContext: 
          type: boolean
          description: true if Service Provider needs to access member context
        subscriptionContext: 
          type: boolean
          description: true if Service Provider needs to access subscription context
    callbackPayloadDefObject:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/attributeObject'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/serviceFieldMapping'
    invocationAttributeObject:
      allOf:
        - $ref: '#/components/schemas/attributeObject'
        - type: object
          properties:
            required:
              type: boolean
              description: Whether or not this attribute is required by the service
            enforcePicklistSelect:
              type: boolean
              description: Whether or not the attribute value has to be exact match of an entry from the picklist
            picklistUrl:
              type: string
              format: uri
              description: Endpoint to provide a value list for this attribute to choose from. Applicable if enforcePicklistSelect is true
              example: 'https://serviceprovider.com/get/picklist'
    attributeObject:
      type: object
      required: [apiName, i18n, dataType]
      properties:
        apiName:
          type: string
          example: 'keyValue'
        i18n:
          type: object
          properties:
            en_US:
              $ref: '#/components/schemas/attributeI18nObject'
        dataType:
          type: string
          example: 'string'
    attributeI18nObject:
      type: object
      properties:
        name:
          type: string
          example: 'Key Value'
        description:
          type: string
          example: 'Marketo field to be used as lookup value'
        uiTooltip:
          type: string
          example: 'What Marketo field should be used to find the lookup value?'
    serviceFieldMapping:
      type: object
      properties:
        serviceAttributeName:
          type: string
          example: 'serviceAttributeName'
        suggestedMarketoAttribute:
          type: string
          example: 'marketoAttributeName'
        description:
          type: object
          properties:
            en_US:
              type: string
              example: 'This is what this field is for'
        dataType:
          type: string
          example: integer
    fieldsCallback:
      type: object
      properties:
        fieldName1:
          type: string
          example: 'fieldValue1'
        fieldName2:
          type: string
          example: 'fieldValue2'
          
        
          
  securitySchemes:
    #need to determine what security schemes are needed. 
    petstoreAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    apiKey:
      type: apiKey
      name: api_key
      in: header
